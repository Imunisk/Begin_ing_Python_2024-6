# 넘파이 array 메서드 사용
# 배열로 변경하기
import numpy as np

lst1 = [1,2,3,4,5]
np1 = np.array(lst1)
np1      # array([1,2,3,4,5])



# 배열 안 숫자에 연산 적용하기 - 곱셈
import numpy as np

lst1 = [1,2,3,4,5]
np1 = np.array(lst1)
np1 * 2      # [2,4,6,8,10]

# 배열 안 숫자에 연산 적용하기 - 덧셈
import numpy as np

lst1 = [1,2,3,4,5]
lst2 = [5,4,3,2,1]
np1 = np.array(lst1)
np2 = np.array(lst2)
np1 + np2      # [6,6,6,6,6] 



# 그렇다면, numpy 안 쓰는 경우에는?
lst1 = [1,2,3,4,5]

lst_n = []
for i in lst1:
    lst_n.append(i*2)
lst_n      # [2,4,6,8,10]



# 넘파이는 n차원의 배열을 만든다.
# 따라서 행렬 얼마인지 체크해보는 메서드도 있다.
# 넘파이 속성 체크해보는 메서드

print(n.dim)           # n 객체의 차원
print(n.shape)         # n 객체의 배열모양 (=행.열.)
print(n.size)          # n 객체의 원소 개수 
print(n.itemsize)      # n 객체 원소들의 메모리 크기 
print(n.dtype)         # n 객체 원소들의 자료형 


e.g_1)
n= np.array([1,2,3,4,5])
print(n.ndim)          # 1
print(n.shape)         # (5,)   (행이 5개)
print(n.size)          # 5
print(n.itemsize)      # 4
print(n.dtype)         # int32

e.g_2)
np.t1= np.array([[1,2,3],[4,5,6]])
print(np_t1.ndim)      # 2
print(np_t1.shape)     # (2,3)   (행이 2개,열이 3개)
print(np_t1.size)      # 6
print(np_t1.itemsize)  # 4
print(np_t1.dtype)     # int32



# arrange 메서드
# range(1,10,2)와 유사하다.
# 그리고 float 넣어도 가능하다

np_range = np.arange(1,10,2)
print(np_range)         # [1 3 5 7 9]

np_range2 = np.arange(0.1, 1.0, 0.1)
print(np_range2)        # [0.1  0.2  .....   0.9]



# reshape 메서드
# numpy.arange(1,10,2).reshape(row, column)
# 행이 확실하면, 열은 걍 -1 써도 무방하다.

'''
아래 1,2 둘은 같다.
[[1 2 3]
 [4 5 6]
 [7 8 9]]
'''
np_array1 = np.arange(1,10).reshape(3,3)
np_array2 = np.arange(1,10).reshape(3,-1) 




# 주요 메서드 - 통계관련
# 표준편차는  루트(분산)
# 분산은   편차**2 들의 합  나누기 (n-1)

np.sum()
np.mean()      평균
np.median()    중앙값
np.std()       표준편차 standard deviation     
np.var()       분산 variance

np.max()
np.min()
np.argmax()    최댓값의 인덱스
np.argmin()    최솟값의 인덱스


e.g_) 10월 온도 데이터
list_oct = [20.1, 19.9, 19.7  ......     ]
np_oct = np.array(list_oct)

np_oct.mean()       10월 평균온도
np.meadian(np_oct)
print(np_oct.max(), '10월', str(np_oct.argmax()+1)
+ '일')      # 10월 온도 중 최고 온도와 일자
print(np_oct.min(), '10월', str(np_oct.argmin()+1)
+ '일')      # 10월 온도 중 최저 온도와 일자



# 인덱싱,슬라이싱,이터레이팅

np1 = np.array(1,10)       #[1,2,3,  ...., 9]
print("np1[1] + np1[2] = {}+{}={}"\
.format(np1[1],np1[2], np1[1]+np1[2]))


# 여러 인덱싱 <== np[[~~~]]

np1 = np.array(1,10)
print(np1[[1,3,5]])       # [2 4 6]
np_1 = [1,3,5]
print(np1[np_1])          # [2 4 6]


# 값 변경

np1[2] = 0
np1[[1,3,5]] = [1,1,1]
print(np1)                 # [1 1 0 1 5 1 7 8 9]


# 슬라이싱

np1 = np.arange(1,10)
np1[3:6]                    # array([4,5,6])


# 논리적 인덱싱

sleep_time = [6.6 7.2 6.0 7.2 5.5 9.5 9]
np_time = np.array(sleep_time)
days = np_time > 6.5
print(days)           # True True False .....
print(days.sum())     # 5    (참 합한 것)


e.g_) 평균 온도보다 높은 온도들만 선택하기
list_oct = [20.1 19.9 19.7 .........     ]
np_oct = np.array(list_oct)
days = np_oct > np_oct.mean()
print(days.sum())        # 평균보다 높은 날이 몇 일
print(np_oct[days])      # 평균보다 높은 날 몇 도인지



# concatenate 메서드 - 배열의 결합

e.g_) 1차원
np1 = np.array([1,2,3])
np2 = np.array([4,5,6])
np3 = np.array([7,8,9])
print(np.concatenate([n1,n2,n3]))

e.g_) 2차원   행으로 OR 열으로
ㅁㅁㅁ
ㅁㅁㅁ
ㅁㅁㅁ    ㅁㅁㅁ ㅁㅁㅁ
ㅁㅁㅁ    ㅁㅁㅁ ㅁㅁㅁ
n1 = np.arange(1,7).reshape(2,-1)
n2 = np.arange(7,13).reshape(2,-1)
# 행으로 연결
n_con1 = np.concatenate([n1,n2], axis = 0)
# 열으로 연결
n_con2 = np.concatenate([n1,n2], axis = 1)

# 전치  행을 열로, 열을 행으로
n1 = np.array([[1,2,3],[4,5,6]])
n2 = np.array([[10,20],[30,40],[50,60]])
n2_1 = np.transpose(n2)
# 2X3으로 전치되었으므로, 이제 결합 가능해진다.
print(np.concatenate([n1,n2_1], axis = 0)



# split 메서드 - 배열의 분리
--



# 영행렬,일행렬,단위행렬

nz1 = np.zeros(4)
nz2 = np.zeros(4).reshape(2,2)
nz3 = np.zeros([2,2])          #2,3 이 둘은 같다

nz1 = np.ones(4)
nz2 = np.ones(4).reshape(2,2)
nz3 = np.ones([2,2])          #2,3 이 둘은 같다

nf1 = np.full(10,1)           # 1로 10칸 채움
nf2 = np.full([3,3], 5)


ne1 = np.eye(5,5)
ne2 = np.eye(5,5, dtype = np.int8)
# 단위 행렬은 대각성분이 1이고, 나머지는 0이다.
# 어떠한 행렬이라도 단위 행렬을 곱하면 그 자신의 행렬이 된다.




# 난수 행렬

# 아래 1,2 둘은 같다.  (0~1 사이 난수로 2행4열.)
print(np.random.rand(2,5))
print(np.random.random([2,5]))

# 아래는 (1~9 사이 난수로 3행3열)
print(np.random.randint(1,10,[3,3]))



